---
layout: layouts/basic.njk
title: Agreement
---
<div class="max-w-4xl mx-auto px-4 py-8 bg-white text-gray-800">

	<h1 class="text-3xl font-bold mb-8 text-center">VACATION RENTAL SHORT TERM LEASE AGREEMENT</h1>

	<p class="mb-6 text-justify">This Vacation Rental Short Term Lease Agreement (this "Agreement") is made by and between
		Tobias
		Artz ("Owner") and <span data-main-guest-name></span> ("Guest") of the date last written on the signature page of
		this
		Agreement. Owner and Guest may be referred to individually as "Party" and collectively as "Parties."
		For good and valuable consideration, the sufficiency of which is acknowledged, the Parties agree as follows:</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">1. Property.</h2>

	<p class="mb-4">The property is described as a house located at 8329 E Weldon Ave, Scottsdale, AZ 85251
		(the "Property"). The Property is owned by Owner. The Property is fully furnished by Owner and equipped
		for light housekeeping. The following amenities are included in the Property:</p>

	<ul class="list-disc pl-8 mb-6 space-y-1">
		<li>microwave</li>
		<li>dishwasher</li>
		<li>refrigerator</li>
		<li>washer</li>
		<li>dryer</li>
		<li>wifi</li>
		<li>swimming pool</li>
		<li>linens</li>
	</ul>

	<p>A starter supply of household cleaning and hygiene products may be available in the Property for use.
		Guest is responsible for purchasing any additional supplies and all food and beverages.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">2. Rental Party.</h2>

	<p class="mb-4">All persons in the rental party will be bound by the terms of this Agreement. Only
		persons listed on this Agreement may stay in the Property. "Rental Party" means Guest plus the following
		persons:</p>

	<table class="w-full mb-6 border-collapse border border-gray-300">
		<tr class="bg-gray-100">
			<th class="border border-gray-300 px-4 py-2">First Name & Last Name</th>
			<th class="border border-gray-300 px-4 py-2">Relationship to Guest</th>
		</tr>
		<tr>
			<td class="border border-gray-300 px-4 py-2">
				<span data-main-guest-name></span>
			</td>
			<td class="border border-gray-300 px-4 py-2">Primary Guest</td>
		</tr>
		<tr>
			<td class="border border-gray-300 px-4 py-2">
				<input type="text" class="w-full px-2 py-1 border border-gray-300 rounded" placeholder="Enter name"
							 data-guest-name>
			</td>
			<td class="border border-gray-300 px-4 py-2">
				<select class="w-full px-2 py-1 border border-gray-300 rounded" data-guest-relation>
					<option value="">Select relation</option>
					<option value="Spouse">Spouse</option>
					<option value="Child">Child</option>
					<option value="Family Member">Family Member</option>
					<option value="Friend">Friend</option>
				</select>
			</td>
		</tr>
		<tr>
			<td class="border border-gray-300 px-4 py-2">
				<input type="text" class="w-full px-2 py-1 border border-gray-300 rounded" placeholder="Enter name"
							 data-guest-name>
			</td>
			<td class="border border-gray-300 px-4 py-2">
				<select class="w-full px-2 py-1 border border-gray-300 rounded" data-guest-relation>
					<option value="">Select relation</option>
					<option value="Spouse">Spouse</option>
					<option value="Child">Child</option>
					<option value="Family Member">Family Member</option>
					<option value="Friend">Friend</option>
				</select>
			</td>
		</tr>
		<tr>
			<td class="border border-gray-300 px-4 py-2">
				<input type="text" class="w-full px-2 py-1 border border-gray-300 rounded" placeholder="Enter name"
							 data-guest-name>
			</td>
			<td class="border border-gray-300 px-4 py-2">
				<select class="w-full px-2 py-1 border border-gray-300 rounded" data-guest-relation>
					<option value="">Select relation</option>
					<option value="Spouse">Spouse</option>
					<option value="Child">Child</option>
					<option value="Family Member">Family Member</option>
					<option value="Friend">Friend</option>
				</select>
			</td>
		</tr>
		<tr>
			<td class="border border-gray-300 px-4 py-2">
				<input type="text" class="w-full px-2 py-1 border border-gray-300 rounded" placeholder="Enter name"
							 data-guest-name>
			</td>
			<td class="border border-gray-300 px-4 py-2">
				<select class="w-full px-2 py-1 border border-gray-300 rounded" data-guest-relation>
					<option value="">Select relation</option>
					<option value="Spouse">Spouse</option>
					<option value="Child">Child</option>
					<option value="Family Member">Family Member</option>
					<option value="Friend">Friend</option>
				</select>
			</td>
		</tr>
		<tr>
			<td class="border border-gray-300 px-4 py-2">
				<input type="text" class="w-full px-2 py-1 border border-gray-300 rounded" placeholder="Enter name"
							 data-guest-name>
			</td>
			<td class="border border-gray-300 px-4 py-2">
				<select class="w-full px-2 py-1 border border-gray-300 rounded" data-guest-relation>
					<option value="">Select relation</option>
					<option value="Spouse">Spouse</option>
					<option value="Child">Child</option>
					<option value="Family Member">Family Member</option>
					<option value="Friend">Friend</option>
				</select>
			</td>
		</tr>
	</table>

	<p>The total number of adults in the Rental Party will be <span data-adult-count>1</span>.
		The total number of children in the Rental
		Party will be <span data-child-count>0</span></p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">3. Maximum Occupancy.</h2>

	<p>The maximum number of persons allowed to stay in the Property is limited to
		six (6), unless the Owner gives prior written consent.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">4. Visitors.</h2>

	<p>A visitor is an occupant of the Property who is not staying overnight. The total number of
		persons permitted in the Property at any given time, including visitors, is six (6). Any visitor staying
		overnight is subject to additional charges.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">5. Rental Period & Check-In.</h2>
	<p>The term of this lease will be from <span data-arrival-date></span> ("Arrival Date") to <span
			data-departure-date></span> ("Departure Date"). The Property will be ready for Guest's occupancy beginning at
		4:00 PM
		on
		the Arrival Date and the Property must be vacated by 11:00 AM on the Departure Date, unless otherwise
		agreed by Owner. If Guest or any member of the Rental Party remains on the Property beyond the
		Departure Date, Guest will be responsible to pay the rental rate prescribed in Section 8 below for the
		period of time between Departure Date and the actual date Guest and all members of the Rental Party
		vacate the Property. The Property requires a one (1) night minimum stay.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">6. Keys & Access Codes.</h2>

	<p>Owner will provide Guest with 1 digital
		key(s), which will unlock the front
		door to the Property. Guest is not allowed to make duplicate keys. Any attempt to access a locked
		area
		is
		just cause for immediate termination of this Agreement, forfeiture of all rent paid, and Guest will be liable
		for any missing items or damage.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">7. Rental Rules & Restrictions.</h2>

	<p>Guest agrees to abide by the following restrictions by Owner (the
		"Rules"):</p>

	<ol>
		<li>Smoking is not permitted inside the Property</li>
		<li>Quiet hours are from 10:00 PM to 8:00 AM</li>
		<li>Garbage must be placed in the proper receptacles</li>
	</ol>

	<p>If any person in the Rental Party fails to follow any of the Rules, the Rental Party may be asked to vacate
		the Property and Guest will forfeit all rent paid.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">8. Payment.</h2>

	<p class="mb-4">Guest agrees to pay the rent and fees described below (the "Total Amount Due"). Payment
		in full of the following fees will be due within fourteen (14) days before the Arrival Date.</p>

	<div class="bg-gray-50 p-4 rounded-lg mb-6">
		<table class="w-full">
			<tr>
				<td class="py-2">Rental rate</td>
				<td class="py-2 text-right">$<span data-daily-rate></span> x <span data-num-days></span> nights</td>
				<td class="py-2 text-right">$<span data-subtotal></span></td>
			</tr>
			<tr>
				<td class="py-2">Cleaning fee</td>
				<td class="py-2 text-right">One-time fee</td>
				<td class="py-2 text-right">$150.00</td>
			</tr>
			<tr class="border-t border-gray-300">
				<td class="py-2 font-semibold">Total Amount Due</td>
				<td class="py-2"></td>
				<td class="py-2 text-right font-semibold">$<span data-total></span></td>
			</tr>
		</table>
	</div>

	<p class="mb-4">
		Guest agrees to provide a non-refundable deposit equal to fifty percent (50%) of the total rental fee. This deposit
		must be received by the Owner no later than four (4) weeks (28 days) prior to the scheduled arrival date. Failure to
		submit the deposit within the specified timeframe may result in cancellation of the booking at the Owner's
		discretion. The remaining balance of the total rental fee will be due as outlined in the Rental Agreement.
	</p>

	<p class="mb-2">Acceptable payment methods are:</p>
	<ul class="list-disc pl-8 mb-6 space-y-1">
		<li>Venmo</li>
		<li>Zelle</li>
		<li>Cash</li>
		<li>Personal check</li>
	</ul>

	<p>Checks should be made payable to: Tobias Artz and sent to: 6525 N 81st Place, 85250, Scottsdale
		Arizona.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">9. Security Deposit.</h2>

	<p>Owner reserves the right, at its discretion, to charge a security deposit at the time of
		reservation in the amount of $500.00. This deposit will be refunded after Guest's departure and an
		inspection of the Property by Owner, less any deductions for damage to the Property or furnishings,
		excessive mess requiring additional cleaning or other costs incurred outside the normal course due to
		Guest's stay.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">10. Renewal.</h2>

	<p>This contract expires at the end of the short term rental period defined in Article 5 and does
		not auto-renew. The tenant needs to give intent to rent the property for another month at least 14
		days
		prior to the departure date. This will produce a new short term rental contract that both parties will
		need
		to
		sign to become into effect.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">11. Cleaning.</h2>

	<p>Daily housekeeping services are not included in the rental rate. Throughout
		the rental period, Guest will be responsible for keeping the Property clean and in good
		condition. Any unsafe or dangerous condition must be reported to Owner immediately.
		Guest acknowledges that on the Arrival Date, the Property is in good condition, except
		for any defect Guest may report to Owner by the end of the first day following the Arrival
		Date. The Property should be left in the same condition as it was found by Guest on the
		Arrival Date. Guest promises to leave the Property in good repair.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">12. Furnishings.</h2>

	<p>Furnishings are subject to change without notice. Furniture, bedding, kitchen
		equipment, utensils, and any other personal property supplied with the Property must not be removed
		from the Property. Loss of any items within the Property or damage to the Property or furnishings in
		excess of normal wear and tear will be charged to Guest. The Property will be inspected by Owner after
		Guest's departure. All contents of the Property are the property of Owner.
		If an item should break, Guest
		must notify Owner immediately. Guest is not permitted to alter the wiring of any television, computer, or
		gaming equipment.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">13. Parking.</h2>

	<p>Parking is limited to two (2) spaces. Guest may only park in designated parking area.
		Any
		illegally parked cars may be subject to towing and/or fines.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">14. Mechanical Failures.</h2>

	<p>Owner attempts to properly maintain the Property. While all electrical and
		mechanical equipment within the Property are in good working order, Owner cannot guarantee against
		mechanical failure of electrical service, stopped plumbing, water supply, heating, air conditioning, audio
		visual equipment, internet access, cable service, or appliances. Guest agrees to report any inoperative
		equipment or other maintenance problem to Owner immediately. Owner will make every reasonable effort
		to have repairs done quickly and efficiently. Guest will allow Owner or a person permitted by Owner
		access to the Property for purposes of repair and inspection. Owner is not responsible for any
		inconvenience that may occur and no refunds or rent reductions will be made due to failure of such items.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">15. Acts of God.</h2>

	<p>No refunds will be given if there is a storm or severe weather (i.e. hurricane,
		earthquake, forest fire) even if a mandatory evacuation order has been given. Owner will not be
		liable
		or
		deemed in default under this Agreement for any failure to perform or delay in performing any of its
		obligations due to or arising out of any act not within its control, including, without limitation, acts of God.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">16. Limitation on Liability.</h2>

	<p>Owner is not responsible for any accidents, injuries or illness that occur to
		any member of the Rental Party or Guest's visitors while in the Property or on the Property. Owner is
		not
		responsible for loss of personal belongings or valuables belonging to any member of the Rental Party or
		any of Guest's visitors. Guest agrees to assume the risk of any harm arising from use of the Property.
		UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, INCLUDING TORT, CONTRACT,
		STRICT LIABILITY, OR OTHERWISE, SHALL OWNER BE LIABLE TO GUEST OR ANY OTHER
		PERSON FOR ANY DAMAGES OF ANY NATURE WHATSOEVER INCLUDING ARISING OUT OF OR
		RELATING TO THIS AGREEMENT OR GUEST'S RENTAL OF THE PROPERTY OR USE OF THE
		PROPERTY.
		IN NO EVENT WILL OWNER BE LIABLE FOR ANY DAMAGES IN CONNECTION WITH
		THIS AGREEMENT, EVEN IF OWNER SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF
		SUCH DAMAGE.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">17. Indemnification.</h2>

	<p>Guest acknowledges that the use of the Property by the Rental Party and Guest's
		visitors is entirely at their own risk. Guest will indemnify and hold harmless Owner from any and
		all
		expenses, costs, damages, suits, actions, or liabilities whatsoever arising from or related to any and all
		loss of or damage to personal property, including injury or death resulting from the use or occupancy of
		the Property or the failure of any member of Rental Party or Guest's visitors to observe the rules and
		restrictions set forth in Paragraph 7.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">18. Violation of Agreement.</h2>

	<p>If Guest or any member of the Rental Party violates any of the terms of this
		Agreement, including but not limited to maximum occupancy, visitors and rental rules and restrictions,
		Owner may evict Guest and the Rental Party from the Property and Guest will forfeit all rent and security
		deposit paid. 19. Governing Law. This Agreement and all transactions contemplated by this
		Agreement will be
		governed by, and constructed and enforced in accordance with the laws of the State of Arizona (not
		including its conflicts of laws provisions). Any dispute arising from this Agreement shall be resolved
		through mediation.
		If the dispute cannot be resolved through mediation, then the dispute will be resolved
		through binding arbitration conducted in accordance with the rules of the American Arbitration
		Association.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">20. Amendments.</h2>

	<p>This Agreement may be amended or modified only by a written agreement signed by
		both Owner and Guest. 21. No Waiver. Neither Owner nor Guest shall be deemed to have waived any
		provision of this
		Agreement or the exercise of any rights held under this Agreement unless such waiver is made expressly
		and in writing. 22. Severability. If any provision of this Agreement is held to be invalid or unenforceable in whole
		or in
		part, the remaining provisions shall not be affected and shall continue to be valid and enforceable as
		though the invalid or unenforceable parts had not been included in this Agreement.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">23. Notices.</h2>

	<p>Any notice or communication under this Agreement must be in writing and sent via one of
		the following options:</p>
	<ul>
		<li>personally delivered</li>
		<li>electronic email transmission</li>
		<li>phone</li>
	</ul>

	<h2 class="text-2xl font-semibold mt-8 mb-4">24. Successors and Assigns.</h2>

	<p>This Agreement will inure to the benefit of and be binding upon Owner, its
		successors and assigns, and upon Guest and its permitted successors and assigns. 25. Entire
		Agreement.
		This Agreement represents the entire understanding and agreement between the
		Parties with respect to the subject matter of this Agreement and supersedes all other negotiations,
		understandings and representations (if any) made by and between the Parties.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">25. Disclosure of Information on Lead-Based Paint and/or Lead-Based Paint
		Hazards</h2>

	<h3 class="text-xl font-semibold mt-6 mb-3">Lead Warning Statement</h3>

	<p class="mb-4">Housing built before 1978 may contain lead-based paint. Lead from paint, paint chips, and dust can
		pose
		health hazards if not managed properly. Lead exposure is especially harmful to young children and
		pregnant women. Before renting pre-1978 housing, lessors must disclose the presence of known
		lead-based paint and/or lead-based paint hazards in the dwelling. Lessees must also receive a federally
		approved pamphlet on lead poisoning prevention.</p>

	<div class="mb-6">
		<p class="mb-2 font-semibold">(a) Presence of lead-based paint and/or lead-based paint hazards:</p>
		<p class="mb-4 ml-4">☒ Owner has no knowledge of lead-based paint and/or lead-based paint hazards in the
			housing.</p>

		<p class="mb-2 font-semibold">(b) Records and reports available to the Owner:</p>
		<p class="mb-4 ml-4">☒ Owner has no reports or records pertaining to lead-based paint and/or lead-based paint
			hazards in the housing.</p>
	</div>

	<h2 class="text-2xl font-semibold mt-8 mb-4">26. Security Cameras</h2>

	<p class="mb-6">Renter acknowledges that security cameras are used at our property to ensure the
		security of the premises from theft, unauthorized access, or damage to the property. All security
		cameras are strategically positioned so as to not interfere with the peaceful possession of our guests
		or their privacy. Owner will point out every camera to Renter upon request.</p>

	<p class="mb-8">Renter hereby agrees he/she has reviewed and accepts all terms and conditions contained within this
		Rental Agreement by providing his/her signature below.</p>

	<h2 class="text-2xl font-semibold mt-8 mb-4">SIGNATURES</h2>

	<div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-6">
		<div class="border rounded-lg p-4 bg-white">
			<div class="mb-4">
				<canvas id="guestSignature" class="border rounded w-full" height="200"></canvas>
				<div class="flex justify-between mt-2">
					<button type="button" onclick="clearGuestSignature()" class="text-red-600 hover:text-red-800">
						Clear Signature
					</button>
					<span class="text-sm text-gray-500">Please sign above</span>
				</div>
			</div>
			<div class="mt-4">
				<div class="text-sm text-gray-600">Guest Name</div>
				<div class="border-b border-gray-300 py-2"><span data-main-guest-name></span></div>
			</div>
			<div class="mt-4">
				<div class="text-sm text-gray-600">Date</div>
				<div class="text-sm text-gray-800"><span data-today-date></span></div>
			</div>
		</div>

		<div class="border rounded-lg p-4 bg-white">
			<div class="mb-4" style="height: 100px;">

			</div>
			<div class="mt-4">
				<div class="text-sm text-gray-600">Owner Name</div>
				<div class="border-b border-gray-300 py-2">Tobias Artz</div>
			</div>
			<div class="mt-4">
				<div class="text-sm text-gray-600">Date</div>
				<div class="text-sm text-gray-800"><span data-today-date></span></div>
			</div>
		</div>
	</div>

	<div class="border-t border-gray-200 mt-12 pt-8">
		<h2 class="text-2xl font-semibold mb-6">Photo Verification</h2>

		<div class="max-w-2xl mx-auto">
			<div class="mb-6">
				<p class="text-gray-600 mb-4">Please provide a photo of your government-issued ID or other verification
					document.</p>

				<div class="flex gap-4 mb-4">
					<button onclick="startCamera()"
									class="flex-1 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-200 ease-in-out flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24"
								 stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
										d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"/>
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
										d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"/>
						</svg>
						Take Photo
					</button>

					<span class="text-sm text-gray-600">OR</span>

					<button onclick="document.getElementById('photoUpload').click()"
									class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-200 ease-in-out flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24"
								 stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
										d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"/>
						</svg>
						Upload Photo
					</button>
					<input type="file" id="photoUpload" accept="image/*" class="hidden" onchange="handlePhotoSelect(event)">
				</div>
			</div>


			<!-- Camera Stream -->
			<div id="cameraContainer" class="hidden">
				<video id="cameraStream" class="w-full rounded-lg mb-4" autoplay playsinline></video>
				<button onclick="capturePhoto()"
								class="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-200 ease-in-out mb-4">
					Capture Photo
				</button>
			</div>


			<!-- Photo Preview -->
			<div id="photoPreview" class="hidden">
				<img id="previewImage" class="w-full rounded-lg mb-4 border-2 border-gray-300" alt="Preview">
				<div class="flex justify-between">
					<button onclick="retakePhoto()" class="text-red-600 hover:text-red-800 font-semibold">
						Retake/Replace Photo
					</button>
				</div>
			</div>
		</div>
	</div>

	<div class="border-t border-gray-200 mt-12 pt-8">
		<p style="font-size: 2em;" class="text-center">
			Finally print this agreement and select <strong>Save as PDF</strong>. The resulting PDF will be saved to your device. Please email
			this PDF back to us at <strong>info@artz.holdings</strong>.
		</p>
	</div>

	<div class="flex justify-center gap-4 mt-8 mb-12">
		<button onclick="window.print()"
						class="bg-gray-800 hover:bg-gray-900 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-200 ease-in-out flex items-center">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24"
					 stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
							d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"/>
			</svg>
			Print Agreement and select Save as PDF
		</button>
	</div>
</div>

<!-- Add SignaturePad library -->
<script src="https://cdn.jsdelivr.net/npm/signature_pad@4.1.5/dist/signature_pad.umd.min.js"></script>

<script>
	let guestPad;
	let stream;
	let photoBlob;

	// Photo handling functions
	async function startCamera() {
		try {
			const cameraContainer = document.getElementById('cameraContainer');
			const videoElement = document.getElementById('cameraStream');
			document.getElementById('photoPreview').classList.add('hidden');

			stream = await navigator.mediaDevices.getUserMedia({
				video: {facingMode: 'environment'},
				audio: false
			});

			videoElement.srcObject = stream;
			cameraContainer.classList.remove('hidden');
		} catch (err) {
			console.error('Error accessing camera:', err);
			alert('Unable to access camera. Please ensure you have granted camera permissions.');
		}
	}

	function capturePhoto() {
		const video = document.getElementById('cameraStream');
		const canvas = document.createElement('canvas');
		canvas.width = video.videoWidth;
		canvas.height = video.videoHeight;

		canvas.getContext('2d').drawImage(video, 0, 0);

		canvas.toBlob((blob) => {
			photoBlob = blob;
			displayPreview(URL.createObjectURL(blob));
		}, 'image/jpeg', 0.8);

		stopCamera();
	}

	function stopCamera() {
		if (stream) {
			stream.getTracks().forEach(track => track.stop());
			document.getElementById('cameraContainer').classList.add('hidden');
		}
	}

	function handlePhotoSelect(event) {
		const file = event.target.files[0];
		if (file) {
			photoBlob = file;
			displayPreview(URL.createObjectURL(file));
		}
	}

	function displayPreview(url) {
		const previewContainer = document.getElementById('photoPreview');
		const previewImage = document.getElementById('previewImage');

		previewImage.src = url;
		previewContainer.classList.remove('hidden');
	}

	function retakePhoto() {
		document.getElementById('photoPreview').classList.add('hidden');
		document.getElementById('photoUpload').value = '';
		photoBlob = null;
	}

	function savePhoto() {
		if (!photoBlob) {
			alert('Please take or upload a photo first.');
			return;
		}

		// Here you can implement the logic to save/upload the photo
		// For example:
		// const formData = new FormData();
		// formData.append('photo', photoBlob);
		// await fetch('/api/upload-photo', { method: 'POST', body: formData });

		alert('Photo saved successfully!');
	}

	document.addEventListener('DOMContentLoaded', function () {
		// Get URL parameters
		const urlParams = new URLSearchParams(window.location.search);
		const guestName = urlParams.get('guestName') || '';
		const rawArrivalDate = urlParams.get('arrivalDate') || ''; // Format: MM/DD/YYYY
		const dailyRate = parseFloat(urlParams.get('dailyRate')) || 375.00;
		const numDays = parseInt(urlParams.get('numDays')) || 2;
		const cleaningFee = 150.00; // Fixed cleaning fee

		// Initialize signature pad
		const guestCanvas = document.getElementById('guestSignature');

		// Set canvas width to parent width
		function resizeCanvas(canvas) {
			const ratio = Math.max(window.devicePixelRatio || 1, 1);
			canvas.width = canvas.offsetWidth * ratio;
			canvas.height = canvas.height * ratio;
			canvas.getContext("2d").scale(ratio, ratio);
		}

		// Resize canvas
		resizeCanvas(guestCanvas);

		// Initialize SignaturePad instance
		guestPad = new SignaturePad(guestCanvas, {
			backgroundColor: 'rgb(255, 255, 255)',
			penColor: 'rgb(0, 0, 0)'
		});

		// Handle window resize
		window.addEventListener('resize', function () {
			resizeCanvas(guestCanvas);
			guestPad.clear();
		});

		// Function to calculate and update guest counts
		function updateGuestCounts() {
			const relationInputs = document.querySelectorAll('[data-guest-relation]');
			let adultCount = 1; // Start with 1 for primary guest
			let childCount = 0;

			relationInputs.forEach(select => {
				if (select.value) {
					if (select.value === 'Child') {
						childCount++;
					} else {
						adultCount++;
					}
				}
			});

			document.querySelector('[data-adult-count]').textContent = adultCount;
			document.querySelector('[data-child-count]').textContent = childCount;
		}

		// Function to format date like "July 5th, 2024"
		function formatDate(dateString) {
			const date = new Date(dateString);
			const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
			const day = date.getDate();
			const month = months[date.getMonth()];
			const year = date.getFullYear();

			// Add ordinal suffix to day
			let suffix = 'th';
			if (day % 10 === 1 && day !== 11) suffix = 'st';
			if (day % 10 === 2 && day !== 12) suffix = 'nd';
			if (day % 10 === 3 && day !== 13) suffix = 'rd';

			return `${month} ${day}${suffix}, ${year}`;
		}

		// Set today's date for signatures
		const today = new Date();
		document.querySelectorAll('[data-today-date]').forEach(element => {
			element.textContent = formatDate(today);
		});

		// Calculate and format dates
		const arrivalDate = rawArrivalDate ? formatDate(rawArrivalDate) : '';

		// Calculate departure date
		let departureDate = '';
		if (rawArrivalDate) {
			const depDate = new Date(rawArrivalDate);
			depDate.setDate(depDate.getDate() + numDays);
			departureDate = formatDate(depDate);
		}

		// Update all guest name instances
		document.querySelectorAll('[data-main-guest-name]').forEach(element => {
			element.textContent = guestName;
		});

		// Update arrival date
		document.querySelectorAll('[data-arrival-date]').forEach(element => {
			element.textContent = arrivalDate;
		});

		// Update departure date
		document.querySelectorAll('[data-departure-date]').forEach(element => {
			element.textContent = departureDate;
		});

		// Calculate and update payment information
		const subtotal = dailyRate * numDays;
		const total = subtotal + cleaningFee;

		document.querySelector('[data-daily-rate]').textContent = dailyRate.toFixed(2);
		document.querySelector('[data-num-days]').textContent = numDays;
		document.querySelector('[data-subtotal]').textContent = subtotal.toFixed(2);
		document.querySelector('[data-total]').textContent = total.toFixed(2);

		// Handle additional guest inputs
		const guestInputs = document.querySelectorAll('[data-guest-name]');
		const relationInputs = document.querySelectorAll('[data-guest-relation]');

		// Add event listeners to inputs
		guestInputs.forEach(input => {
			input.addEventListener('change', updateGuestCounts);
		});

		relationInputs.forEach(select => {
			select.addEventListener('change', updateGuestCounts);
		});

		// Load any existing additional guests from URL
		const additionalGuests = JSON.parse(urlParams.get('additionalGuests') || '[]');
		additionalGuests.forEach((guest, index) => {
			if (guestInputs[index] && relationInputs[index]) {
				guestInputs[index].value = guest.name;
				relationInputs[index].value = guest.relation;
			}
		});

		// Initial guest count update
		updateGuestCounts();
	});

	// Clear signature function
	function clearGuestSignature() {
		guestPad.clear();
	}

	// Save signature function
	function saveSignatures() {
		if (guestPad.isEmpty()) {
			alert('Please provide guest signature before saving.');
			return;
		}

		// Get the signature as base64 PNG
		const guestSignature = guestPad.toDataURL();

		// For demonstration, we'll just show a success message
		alert('Signature saved successfully!');

		// You can add your own logic here to handle the signature
		// For example:
		// sendSignatureToServer(guestSignature);
	}
</script>
